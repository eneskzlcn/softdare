// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/softdare/server (interfaces: RootHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRootHandler is a mock of RootHandler interface.
type MockRootHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRootHandlerMockRecorder
}

// MockRootHandlerMockRecorder is the mock recorder for MockRootHandler.
type MockRootHandlerMockRecorder struct {
	mock *MockRootHandler
}

// NewMockRootHandler creates a new mock instance.
func NewMockRootHandler(ctrl *gomock.Controller) *MockRootHandler {
	mock := &MockRootHandler{ctrl: ctrl}
	mock.recorder = &MockRootHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRootHandler) EXPECT() *MockRootHandlerMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method.
func (m *MockRootHandler) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockRootHandlerMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRootHandler)(nil).ServeHTTP), arg0, arg1)
}
