// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/softdare/internal/comment (interfaces: SessionProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionProvider is a mock of SessionProvider interface.
type MockSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSessionProviderMockRecorder
}

// MockSessionProviderMockRecorder is the mock recorder for MockSessionProvider.
type MockSessionProviderMockRecorder struct {
	mock *MockSessionProvider
}

// NewMockSessionProvider creates a new mock instance.
func NewMockSessionProvider(ctrl *gomock.Controller) *MockSessionProvider {
	mock := &MockSessionProvider{ctrl: ctrl}
	mock.recorder = &MockSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionProvider) EXPECT() *MockSessionProviderMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockSessionProvider) Exists(arg0 *http.Request, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockSessionProviderMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSessionProvider)(nil).Exists), arg0, arg1)
}

// Get mocks base method.
func (m *MockSessionProvider) Get(arg0 *http.Request, arg1 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSessionProviderMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionProvider)(nil).Get), arg0, arg1)
}

// GetString mocks base method.
func (m *MockSessionProvider) GetString(arg0 *http.Request, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockSessionProviderMockRecorder) GetString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockSessionProvider)(nil).GetString), arg0, arg1)
}

// Pop mocks base method.
func (m *MockSessionProvider) Pop(arg0 *http.Request, arg1 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Pop indicates an expected call of Pop.
func (mr *MockSessionProviderMockRecorder) Pop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockSessionProvider)(nil).Pop), arg0, arg1)
}

// PopError mocks base method.
func (m *MockSessionProvider) PopError(arg0 *http.Request, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopError indicates an expected call of PopError.
func (mr *MockSessionProviderMockRecorder) PopError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopError", reflect.TypeOf((*MockSessionProvider)(nil).PopError), arg0, arg1)
}

// Put mocks base method.
func (m *MockSessionProvider) Put(arg0 *http.Request, arg1 string, arg2 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0, arg1, arg2)
}

// Put indicates an expected call of Put.
func (mr *MockSessionProviderMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSessionProvider)(nil).Put), arg0, arg1, arg2)
}
