// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/softdare/internal/post (interfaces: Renderer)

// Package mocks is a generated GoMock package.
package mocks

import (
	template "html/template"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRenderer is a mock of Renderer interface.
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer.
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance.
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// RenderTemplate mocks base method.
func (m *MockRenderer) RenderTemplate(arg0 http.ResponseWriter, arg1 *template.Template, arg2 interface{}, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderTemplate", arg0, arg1, arg2, arg3)
}

// RenderTemplate indicates an expected call of RenderTemplate.
func (mr *MockRendererMockRecorder) RenderTemplate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderTemplate", reflect.TypeOf((*MockRenderer)(nil).RenderTemplate), arg0, arg1, arg2, arg3)
}
